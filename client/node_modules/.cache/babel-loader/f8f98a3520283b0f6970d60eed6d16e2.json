{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\byron\\\\Documents\\\\Docs\\\\Programming\\\\sap\\\\sap_express\\\\client\\\\src\\\\themes\\\\customThemeProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport getTheme from './base'; // eslint-disable-next-line no-unused-vars\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CustomThemeContext = /*#__PURE__*/React.createContext({\n  currentTheme: 'normal',\n  setTheme: null\n});\n\nconst CustomThemeProvider = props => {\n  _s();\n\n  // eslint-disable-next-line react/prop-types\n  const {\n    children\n  } = props; // Read current theme from localStorage or maybe from an api\n\n  const currentTheme = localStorage.getItem('appTheme') || 'normal'; // State to hold the selected theme name\n\n  const [themeName, _setThemeName] = useState(currentTheme); // Retrieve the theme object by theme name\n\n  const theme = getTheme(themeName); // Wrap _setThemeName to store new theme names in localStorage\n\n  const setThemeName = name => {\n    localStorage.setItem('appTheme', name);\n\n    _setThemeName(name);\n  };\n\n  const contextValue = {\n    currentTheme: themeName,\n    setTheme: setThemeName\n  };\n  return /*#__PURE__*/_jsxDEV(CustomThemeContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsxDEV(MuiThemeProvider, {\n      theme: theme,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustomThemeProvider, \"QSveQMERZ2OuYiafgQ8p04Hj938=\");\n\n_c = CustomThemeProvider;\nexport default CustomThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomThemeProvider\");","map":{"version":3,"sources":["C:/Users/byron/Documents/Docs/Programming/sap/sap_express/client/src/themes/customThemeProvider.js"],"names":["React","useState","MuiThemeProvider","getTheme","CustomThemeContext","createContext","currentTheme","setTheme","CustomThemeProvider","props","children","localStorage","getItem","themeName","_setThemeName","theme","setThemeName","name","setItem","contextValue"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,OAAOC,QAAP,MAAqB,QAArB,C,CAEA;;;AACA,OAAO,MAAMC,kBAAkB,gBAAGJ,KAAK,CAACK,aAAN,CAChC;AACEC,EAAAA,YAAY,EAAE,QADhB;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CADgC,CAA3B;;AAOP,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AACrC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB,CAFqC,CAIrC;;AACA,QAAMH,YAAY,GAAGK,YAAY,CAACC,OAAb,CAAqB,UAArB,KAAoC,QAAzD,CALqC,CAOrC;;AACA,QAAM,CAACC,SAAD,EAAYC,aAAZ,IAA6Bb,QAAQ,CAACK,YAAD,CAA3C,CARqC,CAUrC;;AACA,QAAMS,KAAK,GAAGZ,QAAQ,CAACU,SAAD,CAAtB,CAXqC,CAarC;;AACA,QAAMG,YAAY,GAAIC,IAAD,IAAU;AAC7BN,IAAAA,YAAY,CAACO,OAAb,CAAqB,UAArB,EAAiCD,IAAjC;;AACAH,IAAAA,aAAa,CAACG,IAAD,CAAb;AACD,GAHD;;AAKA,QAAME,YAAY,GAAG;AACnBb,IAAAA,YAAY,EAAEO,SADK;AAEnBN,IAAAA,QAAQ,EAAES;AAFS,GAArB;AAKA,sBACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEG,YAApC;AAAA,2BACE,QAAC,gBAAD;AAAkB,MAAA,KAAK,EAAEJ,KAAzB;AAAA,gBAAiCL;AAAjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA7BD;;GAAMF,mB;;KAAAA,mB;AA+BN,eAAeA,mBAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { MuiThemeProvider } from '@material-ui/core/styles'\r\nimport getTheme from './base'\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nexport const CustomThemeContext = React.createContext(\r\n  {\r\n    currentTheme: 'normal',\r\n    setTheme: null,\r\n  },\r\n)\r\n\r\nconst CustomThemeProvider = (props) => {\r\n  // eslint-disable-next-line react/prop-types\r\n  const { children } = props\r\n\r\n  // Read current theme from localStorage or maybe from an api\r\n  const currentTheme = localStorage.getItem('appTheme') || 'normal'\r\n\r\n  // State to hold the selected theme name\r\n  const [themeName, _setThemeName] = useState(currentTheme)\r\n\r\n  // Retrieve the theme object by theme name\r\n  const theme = getTheme(themeName)\r\n\r\n  // Wrap _setThemeName to store new theme names in localStorage\r\n  const setThemeName = (name) => {\r\n    localStorage.setItem('appTheme', name)\r\n    _setThemeName(name)\r\n  }\r\n\r\n  const contextValue = {\r\n    currentTheme: themeName,\r\n    setTheme: setThemeName,\r\n  }\r\n\r\n  return (\r\n    <CustomThemeContext.Provider value={contextValue}>\r\n      <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\r\n    </CustomThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport default CustomThemeProvider;"]},"metadata":{},"sourceType":"module"}