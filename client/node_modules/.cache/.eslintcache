[{"C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\index.js":"1","C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\reportWebVitals.js":"2","C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\theme\\normal.js":"3","C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\views\\home\\index.js":"4","C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\views\\home\\styles.js":"5","C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\components\\TableButtons\\tableButtons.js":"6","C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\components\\TweetTable\\tweetTable.js":"7","C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\components\\PieChart\\piechart.js":"8","C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\components\\TweetTable\\styles.js":"9","C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\components\\TableButtons\\styles.js":"10"},{"size":598,"mtime":1613912195603,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":560,"mtime":1614245695220,"results":"14","hashOfConfig":"12"},{"size":4802,"mtime":1614263543468,"results":"15","hashOfConfig":"12"},{"size":3694,"mtime":1614263745167,"results":"16","hashOfConfig":"12"},{"size":1929,"mtime":1614259095148,"results":"17","hashOfConfig":"12"},{"size":1573,"mtime":1614260161167,"results":"18","hashOfConfig":"12"},{"size":1131,"mtime":1614254219930,"results":"19","hashOfConfig":"12"},{"size":772,"mtime":1614263132989,"results":"20","hashOfConfig":"12"},{"size":556,"mtime":1614259185860,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"198ec4u",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\index.js",[],"C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\reportWebVitals.js",[],"C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\theme\\normal.js",[],"C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\views\\home\\index.js",["44","45","46"],"import { React, useState, useEffect } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Typography, TextField, Button, Divider } from \"@material-ui/core\";\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport { motion } from \"framer-motion\"\r\n\r\n// Local imports\r\nimport PieChartComp from \"../../components/PieChart/piechart\"\r\nimport TweetTable from \"../../components/TweetTable/tweetTable\"\r\nimport TableButtons from \"../../components/TableButtons/tableButtons\"\r\nimport styles from \"./styles.js\";\r\n\r\nconst Home = (props) => {\r\n    const [Query, setQuery] = useState(\"\");\r\n    const [PrevQuery, setPrevQuery] = useState(\"\");\r\n    const [Sentiment, setSentiment] = useState(\"\");\r\n    const [pieData, setPieData] = useState([]);\r\n    const [tweetList, setTweetList] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [chartLoad, setChartLoad] = useState(false);\r\n    const [Filter, setFilter] = useState(\"Positive\");\r\n    const [queryList, setQueryList] = useState([]);\r\n    const { classes } = props;\r\n\r\n    const handleFilter = (value) => {\r\n      setFilter(value);\r\n    }\r\n\r\n  \r\n    const handleSubmit = (event) => {\r\n      console.log(\"here\")\r\n      console.log(Query)\r\n      if (Query !== \"\")\r\n      {\r\n        // string.charAt(0).toUpperCase() + string.slice(1);\r\n        setLoaded(false);\r\n        setLoading(true);\r\n        setChartLoad(false);\r\n        setFilter(\"Positive\");\r\n        setPrevQuery(Query.charAt(0).toUpperCase() + Query.slice(1));\r\n        setQuery(\"\");\r\n        setTimeout(() => {fetchTweets();}, 500)\r\n        setTimeout(() => {setChartLoad(true);}, 1000)\r\n      \r\n      }   \r\n      event.preventDefault();\r\n    };\r\n\r\n    const fetchTweets = () => {\r\n      fetch('/api/getTweets?query=' + Query)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setLoading(false);\r\n        setLoaded(true);\r\n        setSentiment(data[0]);\r\n        setPieData(data[1]);\r\n        setTweetList(data[2]);\r\n      })\r\n    }\r\n\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <Typography className={classes.title}>Welcome to the Twitter Sentiment Tool</Typography>\r\n        <Typography className={classes.desc}>Enter a topic to find the overall sentiment on Twitter.</Typography>\r\n        <motion.div layout className={classes.activeContainer}>\r\n            <form className={classes.input} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <motion.div layout className={classes.inputRow}>\r\n                <TextField \r\n                    className={classes.field}\r\n                    label=\"Search\"\r\n                    variant=\"outlined\"\r\n                    value={Query}\r\n                    onChange={(event) => setQuery(event.target.value)}\r\n                />\r\n                <div className={classes.submitButton}>\r\n                  <Button type=\"Submit\">Submit</Button>\r\n                </div>\r\n              </motion.div>\r\n            </form>\r\n             \r\n            {loading &&\r\n              <div layout className={classes.searchPaneLoading}>\r\n                <div className={classes.loadingLeft}>\r\n                  <Skeleton style={{marginLeft: 85, marginTop: 20}} variant=\"rect\" width={300} height={100} />\r\n                  <Skeleton style={{marginLeft: 60, marginTop: 20}} variant=\"circle\" width={350} height={350} />\r\n                </div>\r\n                <div className={classes.loadingTable}>\r\n                    <Skeleton variant=\"rect\" width={470} height={460} />\r\n                </div>\r\n              </div>\r\n            }\r\n            {loaded && \r\n            <div className={classes.contentRoot}>\r\n              <Divider className={classes.divider} />\r\n              <div layout className={classes.searchPane}> \r\n                <div className={classes.leftPane}>\r\n                  {chartLoad &&\r\n                    <div>\r\n                      <div className={classes.detailCont}>\r\n                        <Typography className={classes.details}>Search: {PrevQuery}</Typography>\r\n                        <Typography className={classes.details}>Sentiment: {Sentiment}</Typography>\r\n                      </div>\r\n                      <PieChartComp data={pieData} />\r\n                    </div>\r\n                  }\r\n                </div>\r\n                <div className={classes.tableContainer}>\r\n                  <TableButtons filter={Filter} onChange={handleFilter} />\r\n                  <div className={classes.dataTable}>\r\n                    <TweetTable  data={tweetList} filterItem={Filter} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              </div>\r\n            }\r\n        </motion.div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(Home);\r\n","C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\views\\home\\styles.js",[],"C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\components\\TableButtons\\tableButtons.js",[],"C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\components\\TweetTable\\tweetTable.js",["47","48"],"import React from 'react'\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { motion } from \"framer-motion\"\r\nimport styles from \"./styles.js\";\r\nimport TableButtons from \"../TableButtons/tableButtons\"\r\n\r\nconst container = {\r\n    hidden: { opacity: 1, scale: 0 },\r\n    visible: {\r\n      opacity: 1,\r\n      scale: 1,\r\n      transition: {\r\n        delayChildren: 1.3,\r\n        staggerChildren: 0.2\r\n      }\r\n    }\r\n  };\r\n\r\n  const itemObj = {\r\n    hidden: { y: 20, opacity: 0 },\r\n    visible: {\r\n      y: 0,\r\n      opacity: 1\r\n    }\r\n  };\r\n\r\nconst TweetTable = (props) => {\r\n    const data = props.data;\r\n    const filterItem = props.filterItem;\r\n    const { classes } = props;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <motion.div initial=\"hidden\" animate=\"visible\" variants={container} className={classes.table} style={{overflowY: \"hidden\"}}>\r\n                {\r\n                    data.filter(function(item) { return item.threshold == filterItem;})\r\n                    .map((item) =>\r\n                        <motion.div variants={itemObj} className={classes.itemContainer}>\r\n                            <Typography className={classes.itemThresh}>{item.intensity.toFixed(2)}</Typography> \r\n                            <Typography className={classes.itemText}>{item.text}</Typography>   \r\n                        </motion.div>\r\n                    )\r\n                }\r\n            </motion.div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(TweetTable);\r\n","C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\components\\PieChart\\piechart.js",[],"C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\components\\TweetTable\\styles.js",[],"C:\\Users\\byron\\Documents\\Docs\\Programming\\sap_heroku\\client\\src\\components\\TableButtons\\styles.js",[],{"ruleId":"49","severity":1,"message":"50","line":1,"column":27,"nodeType":"51","messageId":"52","endLine":1,"endColumn":36},{"ruleId":"49","severity":1,"message":"53","line":23,"column":12,"nodeType":"51","messageId":"52","endLine":23,"endColumn":21},{"ruleId":"49","severity":1,"message":"54","line":23,"column":23,"nodeType":"51","messageId":"52","endLine":23,"endColumn":35},{"ruleId":"49","severity":1,"message":"55","line":6,"column":8,"nodeType":"51","messageId":"52","endLine":6,"endColumn":20},{"ruleId":"56","severity":1,"message":"57","line":37,"column":72,"nodeType":"58","messageId":"59","endLine":37,"endColumn":74},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'queryList' is assigned a value but never used.","'setQueryList' is assigned a value but never used.","'TableButtons' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]